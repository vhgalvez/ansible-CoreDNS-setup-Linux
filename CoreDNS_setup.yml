- name: Instalar y configurar Podman, Podman Compose y CoreDNS en contenedor
  hosts: freeipa_servers
  become: true

  vars:
    coredns_config_dir: "/etc/coredns"
    domain_name: "example.com"
    kubeconfig_path: "/etc/coredns/coredns-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    dns_records:
      - { name: "master1", ip: "10.17.4.21" }
      - { name: "master2", ip: "10.17.4.22" }
      - { name: "master3", ip: "10.17.4.23" }
      - { name: "worker1", ip: "10.17.4.24" }
      - { name: "worker2", ip: "10.17.4.25" }
      - { name: "worker3", ip: "10.17.4.26" }
      - { name: "storage1", ip: "10.17.4.27" }
      - { name: "freeipa1", ip: "10.17.3.11" }
      - { name: "loadbalancer1", ip: "10.17.3.12" }
      - { name: "loadbalancer2", ip: "10.17.3.13" }
      - { name: "postgresql1", ip: "10.17.3.14" }
      - { name: "k8s-api-lb", ip: "10.17.5.10" }
      - { name: "k8s-api-lb", ip: "10.17.5.20" }

  tasks:
    - name: Asegurarse de que /usr/local/bin est치 en el PATH
      shell: echo $PATH
      register: path_check

    - name: Instalar Podman
      shell: sudo dnf install -y podman
      when: "'podman' not in path_check.stdout"

    - name: Instalar python3-pip si no est치 instalado
      shell: sudo dnf install -y python3-pip
      when: "'pip3' not in path_check.stdout"

    - name: Instalar Podman Compose
      shell: pip3 install podman-compose
      when: "'podman-compose' not in path_check.stdout"

    - name: Crear directorios para CoreDNS
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ coredns_config_dir }}"
        - "{{ coredns_config_dir }}/certs"
        - "{{ coredns_config_dir }}/dynamic_conf"

    - name: Crear archivo de configuraci칩n de CoreDNS (Corefile)
      ansible.builtin.template:
        src: templates/Corefile.j2
        dest: "{{ coredns_config_dir }}/Corefile"
        owner: root
        group: root
        mode: "0644"

    - name: Verificar si el contenedor CoreDNS ya existe
      shell: podman ps -a | grep "coredns"
      register: existing_coredns_container
      changed_when: existing_coredns_container.rc == 0
      failed_when: existing_coredns_container.rc > 1

    - name: Detener y eliminar el contenedor CoreDNS existente (si existe)
      shell: |
        podman stop coredns || true
        podman rm coredns || true
      ignore_errors: true

    - name: Iniciar el contenedor CoreDNS con configuraci칩n de red predeterminada
      shell: |
        podman run -d \
          --name coredns \
          --restart unless-stopped \
          -v "{{ coredns_config_dir }}:/etc/coredns" \
          docker.io/coredns/coredns:latest
      environment:
        TZ: UTC
