---
- name: Configurar y desplegar CoreDNS en contenedor Docker
  hosts: freeipa_servers
  become: true

  vars:
    coredns_config_dir: "/etc/coredns"
    kubeconfig_path: "/etc/coredns/coredns-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    dns_records:
      - { name: "master1", ip: "10.17.4.21" }
      - { name: "master2", ip: "10.17.4.22" }
      - { name: "master3", ip: "10.17.4.23" }
      - { name: "worker1", ip: "10.17.4.24" }
      - { name: "worker2", ip: "10.17.4.25" }
      - { name: "worker3", ip: "10.17.4.26" }
      - { name: "storage1", ip: "10.17.4.27" }
      - { name: "freeipa1", ip: "10.17.3.11" }
      - { name: "loadbalancer1", ip: "10.17.3.12" }
      - { name: "loadbalancer2", ip: "10.17.3.13" }
      - { name: "postgresql1", ip: "10.17.3.14" }
      - { name: "k8s-api-lb", ip: "10.17.5.10" }
      - { name: "k8s-api-lb", ip: "10.17.5.20" }

  tasks:
    # Verificar e instalar Docker
    - name: Verificar si Docker está instalado
      shell: docker --version
      register: docker_installed
      failed_when: false
      changed_when: false

    - name: Instalar Docker si no está instalado
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        systemctl enable docker
        systemctl start docker
      when: docker_installed.rc != 0

    # Verificar e instalar Docker Compose
    - name: Verificar si Docker Compose está instalado
      shell: docker-compose --version
      register: docker_compose_installed
      failed_when: false
      changed_when: false

    - name: Instalar Docker Compose si no está instalado
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
      when: docker_compose_installed.rc != 0

    # Crear directorios para CoreDNS
    - name: Crear directorios para CoreDNS
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ coredns_config_dir }}"
        - "{{ coredns_config_dir }}/certs"
        - "{{ coredns_config_dir }}/dynamic_conf"

    # Crear archivo de configuración de CoreDNS
    - name: Crear archivo de configuración de CoreDNS (Corefile)
      ansible.builtin.template:
        src: templates/Corefile.j2
        dest: "{{ coredns_config_dir }}/Corefile"
        owner: root
        group: root
        mode: '0644'

    # Generar archivo docker-compose.yml para CoreDNS
    - name: Generar archivo docker-compose.yml
      ansible.builtin.template:
        src: "templates/coredns/docker-compose.yml.j2"
        dest: "{{ coredns_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    # Reiniciar contenedor CoreDNS con el nuevo archivo de configuración
    - name: Reiniciar contenedor CoreDNS con nuevo archivo de configuración
      shell: |
        docker-compose -f {{ coredns_config_dir }}/docker-compose.yml down || true
        docker-compose -f {{ coredns_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    # Verificar estado del contenedor CoreDNS
    - name: Verificar estado del contenedor CoreDNS
      shell: docker ps -a | grep coredns || true
      register: coredns_status

    # Mostrar estado del contenedor CoreDNS
    - name: Mostrar estado del contenedor CoreDNS
      debug:
        msg: "{{ coredns_status.stdout_lines }}"