---
- name: Instalación y configuración de Podman, Podman Compose y CoreDNS en contenedor
  hosts: freeipa_servers
  become: true

  vars:
    coredns_config_dir: "/etc/coredns"
    kubeconfig_path: "/etc/coredns/coredns-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    dns_records:
      - { name: "master1", ip: "10.17.4.21" }
      - { name: "master2", ip: "10.17.4.22" }
      - { name: "master3", ip: "10.17.4.23" }
      - { name: "worker1", ip: "10.17.4.24" }
      - { name: "worker2", ip: "10.17.4.25" }
      - { name: "worker3", ip: "10.17.4.26" }
      - { name: "storage1", ip: "10.17.4.27" }
      - { name: "freeipa1", ip: "10.17.3.11" }
      - { name: "loadbalancer1", ip: "10.17.3.12" }
      - { name: "loadbalancer2", ip: "10.17.3.13" }
      - { name: "postgresql1", ip: "10.17.3.14" }
      - { name: "k8s-api-lb", ip: "10.17.5.10" }
      - { name: "k8s-api-lb", ip: "10.17.5.20" }

  tasks:
    - name: Asegurarse de que /usr/local/bin está en el PATH
      command: "echo $PATH"
      register: path_check
      changed_when: false

    - name: Instalar Podman si no está instalado
      yum:
        name: podman
        state: present
      when: "'podman' not in path_check.stdout"

    - name: Instalar python3-pip si no está instalado
      yum:
        name: python3-pip
        state: present
      when: "'pip3' not in path_check.stdout"

    - name: Verificar si Podman Compose está instalado
      command: podman-compose --version
      register: podman_compose_installed
      failed_when: false
      changed_when: false

    - name: Instalar Podman Compose si no está instalado
      pip:
        name: podman-compose
        state: present
      when: podman_compose_installed.rc != 0

    - name: Instalar dnstool
      yum:
        name: dnstool
        state: present

    - name: Instalar tool-net
      yum:
        name: tool-net
        state: present

    - name: Crear directorios para CoreDNS
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ coredns_config_dir }}"
        - "{{ coredns_config_dir }}/certs"
        - "{{ coredns_config_dir }}/dynamic_conf"

    - name: Crear archivo de configuración de CoreDNS (Corefile)
      ansible.builtin.template:
        src: templates/Corefile.j2
        dest: "{{ coredns_config_dir }}/Corefile"
        owner: root
        group: root
        mode: '0644'

    - name: Verificar si el contenedor CoreDNS ya existe
      community.general.podman_container_info:
        name: coredns
      register: existing_coredns_container
      failed_when: false

    - name: Eliminar el contenedor CoreDNS si ya existe
      community.general.podman_container:
        name: coredns
        state: absent
      when: existing_coredns_container.containers | length > 0

    - name: Iniciar el contenedor CoreDNS con network host
      community.general.podman_container:
        name: coredns
        image: docker.io/coredns/coredns:latest
        state: started
        restart_policy: unless-stopped
        network: host
        volumes:
          - "{{ coredns_config_dir }}:/etc/coredns"
      environment:
        TZ: UTC

    - name: Verificar estado del contenedor CoreDNS
      community.general.podman_container_info:
        name: coredns
      register: coredns_info

    - name: Mostrar estado del contenedor CoreDNS
      debug:
        var: coredns_info.containers[0].State