- name: Instalación y configuración de FreeIPA solo como servidor DNS en AlmaLinux
  hosts: freeipa_servers
  become: true
  vars:
    hostname: "freeipa1.cefaslocalserver.com"
    ip_address: "10.17.3.11"
    domain_name: "cefaslocalserver.com"
    realm_name: "CEFASLOCALSERVER.COM"
    forwarder_dns: "8.8.8.8"
    dir_manager_password: "Admin123!"  # Se necesita aunque no se use LDAP
    admin_password: "Admin123!"  # Contraseña del admin de IPA
    dns_records:
      - { name: "master1", ip: "10.17.4.21" }
      - { name: "master2", ip: "10.17.4.22" }
      - { name: "master3", ip: "10.17.4.23" }
      - { name: "worker1", ip: "10.17.4.24" }
      - { name: "worker2", ip: "10.17.4.25" }
      - { name: "worker3", ip: "10.17.4.26" }
      - { name: "storage1", ip: "10.17.4.27" }
      - { name: "freeipa1", ip: "10.17.3.11" }
      - { name: "loadbalancer1", ip: "10.17.3.12" }
      - { name: "loadbalancer2", ip: "10.17.3.13" }
      - { name: "postgresql1", ip: "10.17.3.14" }
      - { name: "bastion1", ip: "192.168.0.20" }

  tasks:
    - name: Verificar si FreeIPA DNS ya está instalado
      ansible.builtin.stat:
        path: /etc/ipa/default.conf
      register: freeipa_installed
      tags: check_freeipa

    - name: Detener y desinstalar FreeIPA si ya está instalado
      ansible.builtin.shell: |
        ipactl stop
        ipa-server-install --uninstall -U
      when: freeipa_installed.stat.exists
      ignore_errors: true
      tags: uninstall_freeipa

    - name: Eliminar archivos residuales de FreeIPA
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/ipa
        - /var/lib/ipa
        - /var/log/ipa
        - /var/named/dns
      when: freeipa_installed.stat.exists
      tags: cleanup_files

    - name: Instalar dependencias necesarias para FreeIPA DNS
      ansible.builtin.dnf:
        name:
          - ipa-server
          - ipa-server-dns
          - bind
          - bind-utils
        state: present
        update_cache: true
      tags: install_dependencies

    - name: Configurar el nombre de host
      ansible.builtin.hostname:
        name: "{{ hostname }}"
      tags: set_hostname

    - name: Configurar archivo hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ ip_address }} {{ hostname }} freeipa1"
        state: present
      tags: set_hosts

    - name: Iniciar la instalación de FreeIPA solo como servidor DNS
      ansible.builtin.shell: |
        ipa-server-install --unattended \
        --hostname="{{ hostname }}" \
        --ip-address="{{ ip_address }}" \
        --domain="{{ domain_name }}" \
        --realm="{{ realm_name }}" \
        --setup-dns \
        --forwarder="{{ forwarder_dns }}" \
        -p "{{ dir_manager_password }}" \
        -a "{{ admin_password }}"
      tags: install_freeipa_dns

    - name: Habilitar y arrancar el servicio named (DNS)
      ansible.builtin.systemd:
        name: named
        enabled: true
        state: started
      tags: enable_named

    - name: Configurar reenvío de DNS en FreeIPA
      ansible.builtin.shell: |
        echo "{{ admin_password }}" | kinit admin
        ipa dnsconfig-mod --forwarder={{ forwarder_dns }}
      tags: configure_dns

    - name: Deshabilitar DNSSEC en la configuración de named
      ansible.builtin.lineinfile:
        path: /etc/named/ipa-options-ext.conf
        line: "dnssec-validation no;"
        state: present
        insertafter: "listen-on-v6 { any; };"
      tags: dns_config

    - name: Permitir recursión para todas las redes en la configuración de named
      ansible.builtin.lineinfile:
        path: /etc/named/ipa-options-ext.conf
        line: "allow-recursion { any; };"
        state: present
        insertafter: "dnssec-validation no;"
      tags: dns_config

    - name: Reiniciar servicio DNS
      ansible.builtin.systemd:
        name: named
        state: restarted
      tags: restart_dns

    - name: Configurar firewall para permitir tráfico DNS
      ansible.builtin.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
      loop:
        - 53/udp
        - 53/tcp
      notify: Reload firewalld
      tags: firewall

    - name: Autenticarse con Kerberos para agregar registros DNS
      ansible.builtin.shell: |
        echo "{{ admin_password }}" | kinit admin
      register: kerberos_auth
      changed_when: false
      tags: auth_kerberos

    - name: Añadir registros DNS si no existen
      loop: "{{ dns_records }}"
      ansible.builtin.shell: |
        ipa dnsrecord-find {{ domain_name }} {{ item.name }} --a-rec={{ item.ip }} || \
        ipa dnsrecord-add {{ domain_name }} {{ item.name }} --a-rec={{ item.ip }}
      ignore_errors: false
      tags: add_dns_records

    - name: Configurar alias DNS para balanceadores (round-robin DNS)
      ansible.builtin.shell: |
        ipa dnsrecord-add {{ domain_name }} loadbalancer --a-rec 10.17.3.12 --a-rec 10.17.3.13
      tags: configure_dns_alias

  handlers:
    - name: Reload firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: reloaded